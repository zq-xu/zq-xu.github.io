import{_ as e,o as r,c as t,Q as o}from"./chunks/framework.48927342.js";const a="/images/cloud-native/kubernetes/kubernetes-high-level-component-archtecture.jpeg",f=JSON.parse('{"title":"Kubernetes基础","description":"","frontmatter":{"sticky":999,"date":"2022-12-31T00:00:00.000Z","recommend":2},"headers":[],"relativePath":"zh/cloud-native/kubernetes/overview.md","filePath":"zh/cloud-native/kubernetes/overview.md"}'),n={name:"zh/cloud-native/kubernetes/overview.md"},l=o('<h1 id="kubernetes基础" tabindex="-1">Kubernetes基础 <a class="header-anchor" href="#kubernetes基础" aria-label="Permalink to &quot;Kubernetes基础&quot;">​</a></h1><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p><a href="https://kubernetes.io/zh-cn/docs/home/" target="_blank" rel="noreferrer">Kubernetes</a>是:</p><ul><li>Google基于<a href="https://research.google/pubs/pub43438/" target="_blank" rel="noreferrer">Borg</a> 开源的容器编排引擎，提供了面向应用的容器部署和管理系统。</li><li><a href="https://www.cncf.io/" target="_blank" rel="noreferrer">CNCF(Cloud Native Computing Foundation)</a>的核心组件，被誉为云时代的操作系统。</li><li>目前使用最广泛的容器编排方案，在容器编排、服务治理、DevOps等诸多领域有着深远影响。</li></ul><p>Kubernetes作为容器编排引擎，简单来说就是负责容器的网络、存储、资源、权限、调度等全生命周期管理。 其本质上是一些以容器形式存在的微服务组件，主要分为负责存储、调度、API等功能的管理面组件和用于网络处理、任务执行的客户端组件。</p><p>Kubernetes往往由多台节点组成集群，这些节点主要分为两类：</p><ul><li>Master节点（常简称为<code>Master</code>）：主要用于部署Kubernetes管理面组件；</li><li>Worker节点(常简称为<code>Node</code>)：主要用于部署工作负载(需要运行的业务应用)。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>Kubernetes的管理面组件只运行在Master节点上；</li><li>Kubernetes的客户端组件在每个节点上都会有一个实例；</li><li>工作负载可以运行在所有节点上，也可以通过配置使工作负载只运行在Worker节点上。</li></ul></div><p>Kubernetes也可以部署在单台节点上(<a href="./installation/minikube.html">Minikube</a>)，或者部署在单个容器里(<a href="https://kind.sigs.k8s.io/" target="_blank" rel="noreferrer">Kind</a>)。</p><h2 id="架构概览" tabindex="-1">架构概览 <a class="header-anchor" href="#架构概览" aria-label="Permalink to &quot;架构概览&quot;">​</a></h2><p><img src="'+a+'" alt="Kubernetes高可用集群整体架构"></p><h2 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h2><ul><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#etcd" target="_blank" rel="noreferrer">Etcd</a>: 集群数据的后台数据库，保存了整个集群的状态；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-apiserver" target="_blank" rel="noreferrer">ApiServer</a>: 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-controller-manager" target="_blank" rel="noreferrer">Controller Manager</a>: 负责维护集群的资源和状态，比如资源管理、故障检测等；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-scheduler" target="_blank" rel="noreferrer">Scheduler</a>: 负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kubelet" target="_blank" rel="noreferrer">Kubelet</a>: 负责维护容器的生命周期，同时也负责Volume(CSI)和网络(CNI)的管理；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-proxy" target="_blank" rel="noreferrer">KubeProxy</a>: 负责提供集群内部的服务发现和负载均衡，使用EBPF网络时可以没有此组件；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#dns" target="_blank" rel="noreferrer">CoreDNS</a>: 负责为整个集群提供DNS服务；</li></ul><h2 id="常用插件" tabindex="-1">常用插件 <a class="header-anchor" href="#常用插件" aria-label="Permalink to &quot;常用插件&quot;">​</a></h2><ul><li><a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/cri/" target="_blank" rel="noreferrer">CRI</a>: 容器运行时接口，负责容器的真正运行，常用<code>Docker</code>或<code>Podman</code>等；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/networking/" target="_blank" rel="noreferrer">CNI</a>:容器网络接口，负责集群网络，默认使用<code>Flannel</code>，常用的还有<code>Calico</code>、<code>Cilium/EBPF</code>；</li><li><a href="https://kubernetes-csi.github.io/docs/" target="_blank" rel="noreferrer">CSI</a>: 容器存储接口，主要负责文件系统的容器挂载，常用<code>LocalPath</code>、<code>NFS</code>、<code>Ceph</code>等；</li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers/" target="_blank" rel="noreferrer">Ingress Controller</a>: 为服务提供内部自定义域名和外网入口，常用<code>Nginx</code>等。</li></ul>',15),s=[l];function i(c,h,d,u,b,p){return r(),t("div",null,s)}const _=e(n,[["render",i]]);export{f as __pageData,_ as default};
