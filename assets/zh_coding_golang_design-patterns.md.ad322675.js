import{_ as e,o as a,c as t,Q as o}from"./chunks/framework.48927342.js";const m=JSON.parse('{"title":"Golang设计模式","description":"","frontmatter":{"sticky":998,"tag":["Golang"],"categories":["Golang"],"recommend":4},"headers":[],"relativePath":"zh/coding/golang/design-patterns.md","filePath":"zh/coding/golang/design-patterns.md"}'),n={name:"zh/coding/golang/design-patterns.md"},r=o('<h1 id="golang设计模式" tabindex="-1">Golang设计模式 <a class="header-anchor" href="#golang设计模式" aria-label="Permalink to &quot;Golang设计模式&quot;">​</a></h1><p>代码的高质量体现在功能性、可靠性、扩展性、可读性等多个方面。</p><p>基于Go语言本身简洁的特点，实现业务功能是一件比较简单的事情。</p><p>但在持续增长的业务驱动下，想要实现需求的快速迭代并保证代码的高质量，就需要使用合适的设计模式来进行代码设计。</p><p>Go语言本身的闭包设计比较严格，在进行项目设计时尤其需要注意项目的代码结构规划和闭包内的代码编写。</p><p>需要注意的是，设计模式不是银弹，不要拿着锤子就觉得哪里都像是钉子，不要过早优化，凡事需要适度，持续重构才是正道。</p><h2 id="基于go语言学习设计模式" tabindex="-1">基于Go语言学习设计模式 <a class="header-anchor" href="#基于go语言学习设计模式" aria-label="Permalink to &quot;基于Go语言学习设计模式&quot;">​</a></h2><p>Go设计模式示例：<a href="https://github.com/senghoo/golang-design-pattern" target="_blank" rel="noreferrer">Go语言设计模式</a></p><p>博客讲解：<a href="http://lailin.xyz/post/go-design-pattern.html" target="_blank" rel="noreferrer">Go设计模式24-总结(更新完毕)</a></p>',9),s=[r];function g(i,l,p,c,d,_){return a(),t("div",null,s)}const f=e(n,[["render",g]]);export{m as __pageData,f as default};
