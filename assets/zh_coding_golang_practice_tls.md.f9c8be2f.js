import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.48927342.js";const p="/images/coding/golang/TLS_handshake.png",d=JSON.parse('{"title":"TLS的Golang应用","description":"","frontmatter":{"tag":["Golang"],"categories":["Golang"],"recommend":2},"headers":[],"relativePath":"zh/coding/golang/practice/tls.md","filePath":"zh/coding/golang/practice/tls.md"}'),o={name:"zh/coding/golang/practice/tls.md"},e=l('<h1 id="tls的golang应用" tabindex="-1">TLS的Golang应用 <a class="header-anchor" href="#tls的golang应用" aria-label="Permalink to &quot;TLS的Golang应用&quot;">​</a></h1><h2 id="tls简介" tabindex="-1">TLS简介 <a class="header-anchor" href="#tls简介" aria-label="Permalink to &quot;TLS简介&quot;">​</a></h2><p><code>TLS</code>通常是指传输层安全(Transport Layer Security),是一种广泛使用的安全性协议。其由<code>Netscape</code>公司开发的安全套接字层(Secure Socket Layer，简称SSL)演变而来，<code>TLS</code>的1.0版本实际上就是<code>SSL</code>的3.1版本，是由<code>IETF</code>(Internet Engineering Task Force，Internet工程任务组)对<code>SSL</code>的3.0版本进行了标准化处理并添加了少数机制，可以看作是SSL的升级版。事实上我们现在用的都是TLS，但因为历史上习惯了SSL这个称呼。</p><p><code>TLS</code>通常用于网络传输加密，我们常见的<code>HTTPS</code>就是在<code>HTTP</code>的基础上进行了<code>TLS</code>加密，从而使得网络传输更加安全可靠。<br> 如今，受<code>TLS</code>保护的<code>HTTPS</code>是网站的标准做法。</p><h2 id="tls原理" tabindex="-1">TLS原理 <a class="header-anchor" href="#tls原理" aria-label="Permalink to &quot;TLS原理&quot;">​</a></h2><p>此处参考<a href="https://zhuyasen.com/post/certificate.html" target="_blank" rel="noreferrer">TLS和SSL</a></p><h3 id="tls认证方式" tabindex="-1">TLS认证方式 <a class="header-anchor" href="#tls认证方式" aria-label="Permalink to &quot;TLS认证方式&quot;">​</a></h3><p><code>TLS</code>有单向认证和双向认证两种方式：</p><ul><li>单向认证指的是只有一个对象校验对端的证书合法性，通常都是client来校验服务器的合法性，那么client需要一个ca.crt，服务器需要server.crt、server.key。</li><li>双向认证指的是相互校验，服务器需要校验每个client，client也需要校验服务器。server需要server.key 、server.crt 、ca.crt文件；client也需要client.key 、client.crt 、ca.crt文件。</li></ul><h3 id="tls握手通信机制" tabindex="-1">TLS握手通信机制 <a class="header-anchor" href="#tls握手通信机制" aria-label="Permalink to &quot;TLS握手通信机制&quot;">​</a></h3><p>TLS/SSL协议的基本过程：</p><p>客户端向服务器端索要并验证公钥。 双方协商生成”对话密钥”。 双方采用”对话密钥”进行加密通信。 客户端和服务器端在正式通信之前经过握手阶段，”握手阶段”涉及四次通信，如下图所示：</p><p><img src="'+p+`" alt="TLS握手流程"></p><p>“握手阶段”的所有通信都是明文的，握手完成之后是通信内容是经过秘钥加密的.</p><p>握手过程说明如下：</p><ol><li><p>客户端发出请求(ClientHello)</p><p>首先，客户端(通常是浏览器)先向服务器发出加密通信的请求，这被叫做ClientHello请求，在这一步客户端主要向服务器提供以下信息。</p><ul><li>支持的协议版本，比如TLS 1.0版。</li><li>一个客户端生成的随机数，稍后用于生成”对话密钥”。</li><li>支持的加密方法，比如RSA公钥加密。</li><li>支持的压缩方法。</li></ul><p>这里需要注意的是，客户端发送的信息之中不包括服务器的域名。也就是说，理论上服务器只能包含一个网站，否则会分不清应该向客户端提供哪一个网站的数字证书。这就是为什么通常一台服务器只能有一张数字证书的原因。对于虚拟主机的用户来说，这当然很不方便。2006年，TLS协议加入了一个Server Name Indication扩展，允许客户端向服务器提供它所请求的域名。</p></li><li><p>服务器回应(SeverHello)</p><p>服务器收到客户端请求后，向客户端发出回应，这叫做SeverHello，服务器的回应包含以下内容：</p><ul><li>确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</li><li>一个服务器生成的随机数，稍后用于生成”对话密钥”。</li><li>确认使用的加密方法，比如RSA公钥加密。</li><li>服务器证书。</li></ul><p>除了上面这些信息，如果服务器需要确认客户端的身份，就会再包含一项请求，要求客户端提供”客户端证书”。比如，金融机构往往只允许认证客户连入自己的网络，就会向正式客户提供USB密钥，里面就包含了一张客户端证书。</p></li><li><p>客户端回应</p><p>客户端收到服务器回应以后，首先验证服务器证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息：</p><ul><li>一个随机数。该随机数用服务器公钥加密，防止被窃听。</li><li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</li><li>客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。</li></ul><p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。</p><p>注：如果前一步服务器要求客户端证书，客户端会在这一步发送证书及相关信息。</p></li><li><p>服务器的最后回应</p><p>服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的”会话密钥”，向客户端最后发送下面信息：</p><ul><li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</li><li>服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。</li></ul><p>整个握手阶段全部结束，接下来客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用”会话密钥”加密内容。</p></li></ol><h2 id="tls服务准备" tabindex="-1">TLS服务准备 <a class="header-anchor" href="#tls服务准备" aria-label="Permalink to &quot;TLS服务准备&quot;">​</a></h2><p>使用<code>TLS</code>加密需要加载相应的证书。<code>TLS</code>证书由证书权威机构颁发给拥有域的个人或企业，该证书包含有关域所有者的重要信息以及服务器的公钥。</p><p>在开发环境中，也可以使用<code>openssl</code>工具制作自签名证书来作为<code>TLS</code>证书使用：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">openssl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genrsa</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.key</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2048</span></span>
<span class="line"><span style="color:#B392F0;">openssl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">req</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-x509</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.key</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.pem</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-days</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3650</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">openssl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genrsa</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.key</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2048</span></span>
<span class="line"><span style="color:#6F42C1;">openssl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">req</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-x509</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.key</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.pem</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-days</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3650</span></span></code></pre></div><p>以上指令生成了自签名私钥文件<code>server.key</code>和证书文件<code>server.pem</code>，可作为开发环境中的<code>TLS</code>证书使用。</p><p>如需在<code>Golang</code>项目中通过代码自动生成自签名<code>TLS</code>证书，可参考<a href="#golang实现自签名证书">Golang实现自签名证书</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>生产环境的<code>TLS</code>证书最好还是去专业的机构申请。</p></div><h2 id="gin框架启动https服务" tabindex="-1">Gin框架启动HTTPS服务 <a class="header-anchor" href="#gin框架启动https服务" aria-label="Permalink to &quot;Gin框架启动HTTPS服务&quot;">​</a></h2><p>在<code>Golang</code>的Web项目中，可以使用<code>TLS</code>实现网络传输加密，从而构建相应的<code>HTTPS</code>服务。 此处以<code>Gin</code>框架为例，运行<code>HTTPS</code>服务：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/gin-gonic/gin</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	RouterCfg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RouterConfig{}</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RouterConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	IP   </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	Port </span><span style="color:#F97583;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	DisableTLS </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// For develop, use the command below to generate the private key and cert:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//     for key:  openssl genrsa -out server.key 2048</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//     for cert: openssl req -new -x509 -key server.key -out server.pem -days 3650</span></span>
<span class="line"><span style="color:#E1E4E8;">	KeyPath  </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	CertPath </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StartRouter</span><span style="color:#E1E4E8;">(r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gin.Engine) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	addr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">JoinHostPort</span><span style="color:#E1E4E8;">(RouterCfg.IP, RouterCfg.Port)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> RouterCfg.DisableTLS {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> r.</span><span style="color:#79B8FF;">Run</span><span style="color:#E1E4E8;">(addr)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> r.</span><span style="color:#79B8FF;">RunTLS</span><span style="color:#E1E4E8;">(addr, RouterCfg.CertPath, RouterCfg.KeyPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/gin-gonic/gin</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	RouterCfg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">RouterConfig{}</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RouterConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	IP   </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	Port </span><span style="color:#D73A49;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	DisableTLS </span><span style="color:#D73A49;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// For develop, use the command below to generate the private key and cert:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//     for key:  openssl genrsa -out server.key 2048</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//     for cert: openssl req -new -x509 -key server.key -out server.pem -days 3650</span></span>
<span class="line"><span style="color:#24292E;">	KeyPath  </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	CertPath </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StartRouter</span><span style="color:#24292E;">(r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gin.Engine) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	addr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">JoinHostPort</span><span style="color:#24292E;">(RouterCfg.IP, RouterCfg.Port)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> RouterCfg.DisableTLS {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r.</span><span style="color:#005CC5;">Run</span><span style="color:#24292E;">(addr)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r.</span><span style="color:#005CC5;">RunTLS</span><span style="color:#24292E;">(addr, RouterCfg.CertPath, RouterCfg.KeyPath)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上部分代码使用<code>Gin</code>框架加载指定路径的<code>TLS</code>证书，从而启动<code>HTTPS</code>服务。</p><h2 id="golang实现自签名证书" tabindex="-1">Golang实现自签名证书 <a class="header-anchor" href="#golang实现自签名证书" aria-label="Permalink to &quot;Golang实现自签名证书&quot;">​</a></h2><p>对于Golang项目，在开发环境或者Demo项目中，为了方便起见，往往需要在代码层面自动生成自签名<code>TLS</code>证书。</p><p>以下代码借鉴<a href="https://github.com/argoproj/argo-cd/blob/master/util/tls/tls.go" target="_blank" rel="noreferrer">argo-cd</a>，实现自签名<code>TLS</code>证书的生成：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto/ecdsa</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto/elliptic</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto/rand</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto/rsa</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto/tls</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto/x509</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">crypto/x509/pkix</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/pem</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">math/big</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	DefaultRSABits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2048</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CertOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Hostnames and IPs to generate a certificate for</span></span>
<span class="line"><span style="color:#E1E4E8;">	Hosts []</span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Name of organization in certificate</span></span>
<span class="line"><span style="color:#E1E4E8;">	Organization </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Creation date</span></span>
<span class="line"><span style="color:#E1E4E8;">	ValidFrom time.Time</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Duration that certificate is valid for</span></span>
<span class="line"><span style="color:#E1E4E8;">	ValidFor time.Duration</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// whether this cert should be its own Certificate Authority</span></span>
<span class="line"><span style="color:#E1E4E8;">	IsCA </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Size of RSA key to generate. Ignored if --ecdsa-curve is set</span></span>
<span class="line"><span style="color:#E1E4E8;">	RSABits </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ECDSA curve to use to generate a key. Valid values are P224, P256 (recommended), P384, P521</span></span>
<span class="line"><span style="color:#E1E4E8;">	ECDSACurve </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GeneratePEM generates a new certificate and key and returns it as PEM encoded bytes</span></span>
<span class="line"><span style="color:#6A737D;">// refers to the argo-cd: https://github.com/argoproj/argo-cd/blob/master/util/tls/tls.go</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratePEM</span><span style="color:#E1E4E8;">(opts CertOptions) ([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	certBytes, privateKey, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">generate</span><span style="color:#E1E4E8;">(opts)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	certpem </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pem.</span><span style="color:#79B8FF;">EncodeToMemory</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pem.Block{Type: </span><span style="color:#9ECBFF;">&quot;CERTIFICATE&quot;</span><span style="color:#E1E4E8;">, Bytes: certBytes})</span></span>
<span class="line"><span style="color:#E1E4E8;">	keypem </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pem.</span><span style="color:#79B8FF;">EncodeToMemory</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">pemBlockForKey</span><span style="color:#E1E4E8;">(privateKey))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> certpem, keypem, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GenerateX509KeyPair generates a X509 key pair</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GenerateX509KeyPair</span><span style="color:#E1E4E8;">(opts CertOptions) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">tls.Certificate, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	certpem, keypem, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GeneratePEM</span><span style="color:#E1E4E8;">(opts)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	cert, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tls.</span><span style="color:#79B8FF;">X509KeyPair</span><span style="color:#E1E4E8;">(certpem, keypem)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cert, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(opts CertOptions) ([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, crypto.PrivateKey, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(opts.Hosts) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hosts not supplied&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> privateKey crypto.PrivateKey</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> opts.ECDSACurve {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		rsaBits </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> DefaultRSABits</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> opts.RSABits </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			rsaBits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts.RSABits</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		privateKey, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rsa.</span><span style="color:#79B8FF;">GenerateKey</span><span style="color:#E1E4E8;">(rand.Reader, rsaBits)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;P224&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		privateKey, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ecdsa.</span><span style="color:#79B8FF;">GenerateKey</span><span style="color:#E1E4E8;">(elliptic.</span><span style="color:#79B8FF;">P224</span><span style="color:#E1E4E8;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;P256&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		privateKey, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ecdsa.</span><span style="color:#79B8FF;">GenerateKey</span><span style="color:#E1E4E8;">(elliptic.</span><span style="color:#79B8FF;">P256</span><span style="color:#E1E4E8;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;P384&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		privateKey, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ecdsa.</span><span style="color:#79B8FF;">GenerateKey</span><span style="color:#E1E4E8;">(elliptic.</span><span style="color:#79B8FF;">P384</span><span style="color:#E1E4E8;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;P521&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		privateKey, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ecdsa.</span><span style="color:#79B8FF;">GenerateKey</span><span style="color:#E1E4E8;">(elliptic.</span><span style="color:#79B8FF;">P521</span><span style="color:#E1E4E8;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unrecognized elliptic curve: </span><span style="color:#79B8FF;">%q</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, opts.ECDSACurve)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to generate private key: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> notBefore time.Time</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> opts.ValidFrom.</span><span style="color:#79B8FF;">IsZero</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		notBefore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">Now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		notBefore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts.ValidFrom</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> validFor time.Duration</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> opts.ValidFor </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		validFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">365</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Hour</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		validFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts.ValidFor</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	notAfter </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> notBefore.</span><span style="color:#79B8FF;">Add</span><span style="color:#E1E4E8;">(validFor)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	serialNumberLimit </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(big.Int).</span><span style="color:#79B8FF;">Lsh</span><span style="color:#E1E4E8;">(big.</span><span style="color:#79B8FF;">NewInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	serialNumber, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rand.</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">(rand.Reader, serialNumberLimit)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to generate serial number: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> opts.Organization </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;organization not supplied&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	template </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> x509.Certificate{</span></span>
<span class="line"><span style="color:#E1E4E8;">		SerialNumber: serialNumber,</span></span>
<span class="line"><span style="color:#E1E4E8;">		Subject: pkix.Name{</span></span>
<span class="line"><span style="color:#E1E4E8;">			Organization: []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{opts.Organization},</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		NotBefore: notBefore,</span></span>
<span class="line"><span style="color:#E1E4E8;">		NotAfter:  notAfter,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		KeyUsage:              x509.KeyUsageKeyEncipherment </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> x509.KeyUsageDigitalSignature,</span></span>
<span class="line"><span style="color:#E1E4E8;">		ExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},</span></span>
<span class="line"><span style="color:#E1E4E8;">		BasicConstraintsValid: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, h </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> opts.Hosts {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ip </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">ParseIP</span><span style="color:#E1E4E8;">(h); ip </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			template.IPAddresses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(template.IPAddresses, ip)</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			template.DNSNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(template.DNSNames, h)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> opts.IsCA {</span></span>
<span class="line"><span style="color:#E1E4E8;">		template.IsCA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">		template.KeyUsage </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> x509.KeyUsageCertSign</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	certBytes, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> x509.</span><span style="color:#79B8FF;">CreateCertificate</span><span style="color:#E1E4E8;">(rand.Reader, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">template, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">template, </span><span style="color:#79B8FF;">publicKey</span><span style="color:#E1E4E8;">(privateKey), privateKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to create certificate: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> certBytes, privateKey, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pemBlockForKey</span><span style="color:#E1E4E8;">(priv </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pem.Block {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> priv.(type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rsa.PrivateKey:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pem.Block{Type: </span><span style="color:#9ECBFF;">&quot;RSA PRIVATE KEY&quot;</span><span style="color:#E1E4E8;">, Bytes: x509.</span><span style="color:#79B8FF;">MarshalPKCS1PrivateKey</span><span style="color:#E1E4E8;">(k)}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ecdsa.PrivateKey:</span></span>
<span class="line"><span style="color:#E1E4E8;">		b, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> x509.</span><span style="color:#79B8FF;">MarshalECPrivateKey</span><span style="color:#E1E4E8;">(k)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Fprintf</span><span style="color:#E1E4E8;">(os.Stderr, </span><span style="color:#9ECBFF;">&quot;Unable to marshal ECDSA private key: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">			os.</span><span style="color:#79B8FF;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pem.Block{Type: </span><span style="color:#9ECBFF;">&quot;EC PRIVATE KEY&quot;</span><span style="color:#E1E4E8;">, Bytes: b}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publicKey</span><span style="color:#E1E4E8;">(priv </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{} {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> priv.(type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rsa.PrivateKey:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">k.PublicKey</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ecdsa.PrivateKey:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">k.PublicKey</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto/ecdsa</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto/elliptic</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto/rand</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto/rsa</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto/tls</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto/x509</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">crypto/x509/pkix</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/pem</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">math/big</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	DefaultRSABits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2048</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CertOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Hostnames and IPs to generate a certificate for</span></span>
<span class="line"><span style="color:#24292E;">	Hosts []</span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Name of organization in certificate</span></span>
<span class="line"><span style="color:#24292E;">	Organization </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Creation date</span></span>
<span class="line"><span style="color:#24292E;">	ValidFrom time.Time</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Duration that certificate is valid for</span></span>
<span class="line"><span style="color:#24292E;">	ValidFor time.Duration</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// whether this cert should be its own Certificate Authority</span></span>
<span class="line"><span style="color:#24292E;">	IsCA </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Size of RSA key to generate. Ignored if --ecdsa-curve is set</span></span>
<span class="line"><span style="color:#24292E;">	RSABits </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ECDSA curve to use to generate a key. Valid values are P224, P256 (recommended), P384, P521</span></span>
<span class="line"><span style="color:#24292E;">	ECDSACurve </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GeneratePEM generates a new certificate and key and returns it as PEM encoded bytes</span></span>
<span class="line"><span style="color:#6A737D;">// refers to the argo-cd: https://github.com/argoproj/argo-cd/blob/master/util/tls/tls.go</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratePEM</span><span style="color:#24292E;">(opts CertOptions) ([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	certBytes, privateKey, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">generate</span><span style="color:#24292E;">(opts)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	certpem </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pem.</span><span style="color:#005CC5;">EncodeToMemory</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pem.Block{Type: </span><span style="color:#032F62;">&quot;CERTIFICATE&quot;</span><span style="color:#24292E;">, Bytes: certBytes})</span></span>
<span class="line"><span style="color:#24292E;">	keypem </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pem.</span><span style="color:#005CC5;">EncodeToMemory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">pemBlockForKey</span><span style="color:#24292E;">(privateKey))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> certpem, keypem, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GenerateX509KeyPair generates a X509 key pair</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GenerateX509KeyPair</span><span style="color:#24292E;">(opts CertOptions) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">tls.Certificate, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	certpem, keypem, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GeneratePEM</span><span style="color:#24292E;">(opts)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	cert, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tls.</span><span style="color:#005CC5;">X509KeyPair</span><span style="color:#24292E;">(certpem, keypem)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cert, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(opts CertOptions) ([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, crypto.PrivateKey, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(opts.Hosts) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hosts not supplied&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> privateKey crypto.PrivateKey</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> opts.ECDSACurve {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		rsaBits </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> DefaultRSABits</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> opts.RSABits </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			rsaBits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts.RSABits</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		privateKey, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rsa.</span><span style="color:#005CC5;">GenerateKey</span><span style="color:#24292E;">(rand.Reader, rsaBits)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;P224&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		privateKey, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecdsa.</span><span style="color:#005CC5;">GenerateKey</span><span style="color:#24292E;">(elliptic.</span><span style="color:#005CC5;">P224</span><span style="color:#24292E;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;P256&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		privateKey, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecdsa.</span><span style="color:#005CC5;">GenerateKey</span><span style="color:#24292E;">(elliptic.</span><span style="color:#005CC5;">P256</span><span style="color:#24292E;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;P384&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		privateKey, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecdsa.</span><span style="color:#005CC5;">GenerateKey</span><span style="color:#24292E;">(elliptic.</span><span style="color:#005CC5;">P384</span><span style="color:#24292E;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;P521&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		privateKey, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecdsa.</span><span style="color:#005CC5;">GenerateKey</span><span style="color:#24292E;">(elliptic.</span><span style="color:#005CC5;">P521</span><span style="color:#24292E;">(), rand.Reader)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unrecognized elliptic curve: </span><span style="color:#005CC5;">%q</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, opts.ECDSACurve)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to generate private key: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> notBefore time.Time</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> opts.ValidFrom.</span><span style="color:#005CC5;">IsZero</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		notBefore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">Now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		notBefore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts.ValidFrom</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> validFor time.Duration</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> opts.ValidFor </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		validFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">365</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Hour</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		validFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts.ValidFor</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	notAfter </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> notBefore.</span><span style="color:#005CC5;">Add</span><span style="color:#24292E;">(validFor)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	serialNumberLimit </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(big.Int).</span><span style="color:#005CC5;">Lsh</span><span style="color:#24292E;">(big.</span><span style="color:#005CC5;">NewInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	serialNumber, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rand.</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">(rand.Reader, serialNumberLimit)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to generate serial number: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> opts.Organization </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;organization not supplied&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	template </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> x509.Certificate{</span></span>
<span class="line"><span style="color:#24292E;">		SerialNumber: serialNumber,</span></span>
<span class="line"><span style="color:#24292E;">		Subject: pkix.Name{</span></span>
<span class="line"><span style="color:#24292E;">			Organization: []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{opts.Organization},</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		NotBefore: notBefore,</span></span>
<span class="line"><span style="color:#24292E;">		NotAfter:  notAfter,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		KeyUsage:              x509.KeyUsageKeyEncipherment </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> x509.KeyUsageDigitalSignature,</span></span>
<span class="line"><span style="color:#24292E;">		ExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},</span></span>
<span class="line"><span style="color:#24292E;">		BasicConstraintsValid: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, h </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> opts.Hosts {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ip </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">ParseIP</span><span style="color:#24292E;">(h); ip </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			template.IPAddresses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(template.IPAddresses, ip)</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			template.DNSNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(template.DNSNames, h)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> opts.IsCA {</span></span>
<span class="line"><span style="color:#24292E;">		template.IsCA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">		template.KeyUsage </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> x509.KeyUsageCertSign</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	certBytes, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> x509.</span><span style="color:#005CC5;">CreateCertificate</span><span style="color:#24292E;">(rand.Reader, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">template, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">template, </span><span style="color:#005CC5;">publicKey</span><span style="color:#24292E;">(privateKey), privateKey)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to create certificate: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> certBytes, privateKey, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pemBlockForKey</span><span style="color:#24292E;">(priv </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pem.Block {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> priv.(type) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rsa.PrivateKey:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pem.Block{Type: </span><span style="color:#032F62;">&quot;RSA PRIVATE KEY&quot;</span><span style="color:#24292E;">, Bytes: x509.</span><span style="color:#005CC5;">MarshalPKCS1PrivateKey</span><span style="color:#24292E;">(k)}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ecdsa.PrivateKey:</span></span>
<span class="line"><span style="color:#24292E;">		b, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> x509.</span><span style="color:#005CC5;">MarshalECPrivateKey</span><span style="color:#24292E;">(k)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Fprintf</span><span style="color:#24292E;">(os.Stderr, </span><span style="color:#032F62;">&quot;Unable to marshal ECDSA private key: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">			os.</span><span style="color:#005CC5;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pem.Block{Type: </span><span style="color:#032F62;">&quot;EC PRIVATE KEY&quot;</span><span style="color:#24292E;">, Bytes: b}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publicKey</span><span style="color:#24292E;">(priv </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{} {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> priv.(type) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rsa.PrivateKey:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">k.PublicKey</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ecdsa.PrivateKey:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">k.PublicKey</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>调用上述代码中的<code>GeneratePEM(opts CertOptions) ([]byte, []byte, error)</code>方法即可生成自签名<code>TLS</code>证书，其返回值分别对应证书文件和密钥文件。</p><p>其简单调用如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// GenerateTLSCert generates the self-signed certs.</span></span>
<span class="line"><span style="color:#6A737D;">// return certPem, keyPem, err</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GenerateTLSCert</span><span style="color:#E1E4E8;">() ([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> router.</span><span style="color:#79B8FF;">GeneratePEM</span><span style="color:#E1E4E8;">(router.CertOptions{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Hosts:        []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		Organization: </span><span style="color:#9ECBFF;">&quot;GroupName&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		IsCA:         </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// GenerateTLSCert generates the self-signed certs.</span></span>
<span class="line"><span style="color:#6A737D;">// return certPem, keyPem, err</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GenerateTLSCert</span><span style="color:#24292E;">() ([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> router.</span><span style="color:#005CC5;">GeneratePEM</span><span style="color:#24292E;">(router.CertOptions{</span></span>
<span class="line"><span style="color:#24292E;">		Hosts:        []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		Organization: </span><span style="color:#032F62;">&quot;GroupName&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		IsCA:         </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>生成自签名证书之后，可根据项目需要将其进行持久化处理等操作。</p>`,35),t=[e];function r(c,E,y,i,F,u){return n(),a("div",null,t)}const A=s(o,[["render",r]]);export{d as __pageData,A as default};
