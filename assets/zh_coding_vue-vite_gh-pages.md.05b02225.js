import{_ as e,o as a,c as t,Q as o}from"./chunks/framework.48927342.js";const b=JSON.parse('{"title":"Github Pages部署","description":"","frontmatter":{"sticky":995,"date":"2022-08-29T00:00:00.000Z","tag":["docs"],"tags":["Vue","Vite"],"categories":["Web"],"recommend":4},"headers":[],"relativePath":"zh/coding/vue-vite/gh-pages.md","filePath":"zh/coding/vue-vite/gh-pages.md"}'),s={name:"zh/coding/vue-vite/gh-pages.md"},r=o(`<h1 id="github-pages部署" tabindex="-1">Github Pages部署 <a class="header-anchor" href="#github-pages部署" aria-label="Permalink to &quot;Github Pages部署&quot;">​</a></h1><p>要将项目的Web示例/文档部署到<a href="https://docs.github.com/en/pages" target="_blank" rel="noreferrer">Github Pages</a>，主要需要完成以下两步：</p><ul><li><a href="#项目打包配置">项目打包配置</a>：项目内部配置，实现本地手动/<code>Github Action</code>自动的打包推送；</li><li><a href="#github配置">Github配置</a>：在<code>Github</code>上进行配置，主要配置用于展示的分支/路径以及权限。</li></ul><p>示例项目：<a href="https://zq-xu.github.io/warehouse-page" target="_blank" rel="noreferrer">Warehouse Page</a></p><h2 id="项目打包配置" tabindex="-1">项目打包配置 <a class="header-anchor" href="#项目打包配置" aria-label="Permalink to &quot;项目打包配置&quot;">​</a></h2><h3 id="vite项目" tabindex="-1">Vite项目 <a class="header-anchor" href="#vite项目" aria-label="Permalink to &quot;Vite项目&quot;">​</a></h3><p>基于<code>Vite</code>构建的项目发布到<code>Github Pages</code>可以参考：</p><ul><li><a href="https://cn.vitejs.dev/guide/static-deploy.html#github-pages" target="_blank" rel="noreferrer">Github Pages</a>：此处是基于<code>Github Action</code>触发流水线自动打包并推送；</li><li><a href="https://v3.vitejs.dev/guide/static-deploy.html#github-pages" target="_blank" rel="noreferrer">v3.GitHub Pages</a>：此处是在本地通过执行脚本进行打包，并推送打包好的静态文件至公开的<code>Github</code>仓库的指定分支。比较适合私有项目，可以只对外暴露打包好的文件，而不暴露私有项目的源代码。</li></ul><h3 id="vitepress文档" tabindex="-1">VitePress文档 <a class="header-anchor" href="#vitepress文档" aria-label="Permalink to &quot;VitePress文档&quot;">​</a></h3><p>基于<code>VitePress</code>构建的博客或者文档可以参考<a href="https://vitepress.vuejs.org/guide/deploying#github-pages" target="_blank" rel="noreferrer">VitePress官方文档Github Pages配置</a>。</p><p>此博客亦是基于<code>VitePress</code>构建，打包推送需结合<code>ACCESS_TOKEN</code>实现，相关配置与官方文档略有不同，详见<a href="https://github.com/zq-xu/zq-xu.github.io/blob/master/.github/workflows/deploy.yml" target="_blank" rel="noreferrer">deploy.yml</a>。</p><p>其中参数<code>ACCESS_TOKEN</code>生成及配置可参考<a href="#access_token">ACCESS_TOKEN</a>.</p><h3 id="vuepress文档" tabindex="-1">VuePress文档 <a class="header-anchor" href="#vuepress文档" aria-label="Permalink to &quot;VuePress文档&quot;">​</a></h3><p>基于<code>VuePress</code>(<code>v2版本</code>)构建的博客或者文档可以参考<a href="https://v2.vuepress.vuejs.org/guide/deployment.html#github-pages" target="_blank" rel="noreferrer">VuePress官方文档Github Pages配置</a>。</p><p>亦可参考本人实践过得项目配置：<a href="https://github.com/zq-xu/dolphindb-cloud-docs/blob/main/.github/workflows/docs.yml" target="_blank" rel="noreferrer">docs.yml</a></p><h2 id="github配置" tabindex="-1">Github配置 <a class="header-anchor" href="#github配置" aria-label="Permalink to &quot;Github配置&quot;">​</a></h2><h3 id="配置发布源" tabindex="-1">配置发布源 <a class="header-anchor" href="#配置发布源" aria-label="Permalink to &quot;配置发布源&quot;">​</a></h3><p>在公开的Github项目中配置用于展示<code>Github Pages</code>的分支及路径。</p><p>详情参考<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site" target="_blank" rel="noreferrer">为 GitHub Pages 站点配置发布源</a>。</p><p>当有新的commit提交到配置的分支/路径时，<code>Github Action</code>会自动触发部署。</p><h3 id="access-token" tabindex="-1">ACCESS_TOKEN <a class="header-anchor" href="#access-token" aria-label="Permalink to &quot;ACCESS_TOKEN&quot;">​</a></h3><p>如果打包配置中没有用到<code>ACCESS_TOKEN</code>,可跳过此步骤。</p><p>参数<code>ACCESS_TOKEN</code>需在Github项目中进行配置：</p><ul><li>生成方式：可参考<a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token" target="_blank" rel="noreferrer">创建 personal access token</a>(此token需具有推送权限，因此权限选中repo即可)。</li><li>配置方式：可参考<a href="https://docs.github.com/zh/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository" target="_blank" rel="noreferrer">为存储库创建加密的Secrets</a></li></ul><h2 id="踩坑记录" tabindex="-1">踩坑记录 <a class="header-anchor" href="#踩坑记录" aria-label="Permalink to &quot;踩坑记录&quot;">​</a></h2><h3 id="github-pages展示404错误" tabindex="-1">Github Pages展示404错误 <a class="header-anchor" href="#github-pages展示404错误" aria-label="Permalink to &quot;Github Pages展示404错误&quot;">​</a></h3><p>基于<code>Vite</code>打包好了Web示例，本地执行<code>vite preview</code>指令，Web示例本地运行正常。</p><p>使用脚本将其推送到<code>Github Pages</code>，示例网页加载失败，查看<code>console</code>显示类似以下错误：</p><ul><li><code>Failed to load resource: the server responded with a status of 404</code></li><li><code>net::ERR_ABORTED 404</code></li></ul><p>反复检查之后，最终发现是问题是因为移除了脚本中的如下内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># place .nojekyll to bypass Jekyll processing</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.nojekyll</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># place .nojekyll to bypass Jekyll processing</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.nojekyll</span></span></code></pre></div><p>上述脚本作用及原因如下(摘自<a href="https://www.jianshu.com/p/ac9b54176dbe" target="_blank" rel="noreferrer">.nojekyll 文件是什么</a>)：</p><p><code>Github Pages</code>默认是基于<code>Jekyll</code>构建，<code>Jekyll</code>是一个将纯文本转换为静态网站的工具，它构建的网站下各种目录都是特定的以下划线开头命名的文件夹，例如 _layouts、_posts ，它会忽略掉其它的以下划线开头的文件夹和文件。</p><p><code>.nojekyll</code>就是告诉<code>Github Pages</code>当前网站不是基于<code>Jekyll</code>构建的，不要忽略掉下划线开头的文件和文件夹。</p>`,34),i=[r];function l(c,n,h,p,d,u){return a(),t("div",null,i)}const f=e(s,[["render",l]]);export{b as __pageData,f as default};
