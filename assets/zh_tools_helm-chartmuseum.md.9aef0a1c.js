import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.48927342.js";const m=JSON.parse('{"title":"Helm仓库","description":"","frontmatter":{"date":"2022-11-26T00:00:00.000Z"},"headers":[],"relativePath":"zh/tools/helm-chartmuseum.md","filePath":"zh/tools/helm-chartmuseum.md"}'),o={name:"zh/tools/helm-chartmuseum.md"},p=n(`<h1 id="helm仓库" tabindex="-1">Helm仓库 <a class="header-anchor" href="#helm仓库" aria-label="Permalink to &quot;Helm仓库&quot;">​</a></h1><p>Helm仓库是用来存放Chart包的平台。</p><p><code>Chartmuseum</code>是常用来作为Helm仓库的工具，本文使用容器的方式来进行本地搭建。</p><h2 id="安装helm仓库" tabindex="-1">安装Helm仓库 <a class="header-anchor" href="#安装helm仓库" aria-label="Permalink to &quot;安装Helm仓库&quot;">​</a></h2><h3 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h3><ul><li>安装机器：Linux系统服务器</li><li>Helm工具：参考<a href="./helm.html#安装helm工具">安装Helm工具</a></li><li>Helm Push插件：参考<a href="./helm-push.html#安装helm-push插件">安装Helm Push插件</a></li></ul><h3 id="本地持久化路径" tabindex="-1">本地持久化路径 <a class="header-anchor" href="#本地持久化路径" aria-label="Permalink to &quot;本地持久化路径&quot;">​</a></h3><p>准备用于Helm仓库的数据持久化的本地路径<code>$chartLocalPath</code>，并给予读写权限：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">chmod</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-R</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">777</span><span style="color:#E1E4E8;"> $chartLocalPath</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">chmod</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-R</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">777</span><span style="color:#24292E;"> $chartLocalPath</span></span></code></pre></div><h3 id="容器启动chartmuseum" tabindex="-1">容器启动Chartmuseum <a class="header-anchor" href="#容器启动chartmuseum" aria-label="Permalink to &quot;容器启动Chartmuseum&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># $chartLocalPath: 用于Helm仓库的数据持久化的本地路径</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  --name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">chartmuseum</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  --restart</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">always</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8090</span><span style="color:#9ECBFF;">:8080</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DEBUG=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $chartLocalPath</span><span style="color:#9ECBFF;">:/charts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">STORAGE=local</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">STORAGE_LOCAL_ROOTDIR=/charts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">ghcr.io/helm/chartmuseum:v0.13.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># $chartLocalPath: 用于Helm仓库的数据持久化的本地路径</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  --name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">chartmuseum</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  --restart</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">always</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8090</span><span style="color:#032F62;">:8080</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DEBUG=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $chartLocalPath</span><span style="color:#032F62;">:/charts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">STORAGE=local</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">STORAGE_LOCAL_ROOTDIR=/charts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">ghcr.io/helm/chartmuseum:v0.13.0</span></span></code></pre></div><p>::: 参数说明</p><ul><li>端口映射：本地<code>8090</code>端口映射到容器<code>8080</code>端口，可使用本地<code>8090</code>端口访问Helm仓库；</li><li>Chartmuseum版本：此处使用<code>Chartmuseum</code>版本号为<code>v0.13.0</code>； :::</li></ul><h2 id="使用helm仓库" tabindex="-1">使用Helm仓库 <a class="header-anchor" href="#使用helm仓库" aria-label="Permalink to &quot;使用Helm仓库&quot;">​</a></h2><h3 id="添加helm仓库" tabindex="-1">添加Helm仓库 <a class="header-anchor" href="#添加helm仓库" aria-label="Permalink to &quot;添加Helm仓库&quot;">​</a></h3><p>将容器启动的<code>Chartmuseum</code>作为Helm仓库添加到本地<code>Helm</code>中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># $ip: 本机ip</span></span>
<span class="line"><span style="color:#B392F0;">helm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">repo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chartmuseum</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">http://</span><span style="color:#E1E4E8;">$ip</span><span style="color:#9ECBFF;">:8090</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># $ip: 本机ip</span></span>
<span class="line"><span style="color:#6F42C1;">helm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">repo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">chartmuseum</span><span style="color:#24292E;">  </span><span style="color:#032F62;">http://</span><span style="color:#24292E;">$ip</span><span style="color:#032F62;">:8090</span></span></code></pre></div><h3 id="上传chart包至helm仓库" tabindex="-1">上传Chart包至Helm仓库 <a class="header-anchor" href="#上传chart包至helm仓库" aria-label="Permalink to &quot;上传Chart包至Helm仓库&quot;">​</a></h3><p>参考<a href="./helm-push.html#使用helm-push插件上传chart包">使用Helm Push插件上传Chart包</a></p><h3 id="清理helm仓库中的chart包" tabindex="-1">清理Helm仓库中的Chart包 <a class="header-anchor" href="#清理helm仓库中的chart包" aria-label="Permalink to &quot;清理Helm仓库中的Chart包&quot;">​</a></h3><p>如果需要清理Helmc仓库中的多余chart包，可按照以下步骤完成：</p><ul><li><p><strong>步骤一</strong> 进入仓库的chart包的持久化存储路径，删除该路径下需要清理的chart包；</p></li><li><p><strong>步骤二</strong> 在仓库的chart包的持久化存储路径中，删除名为”index-cache.yaml”的文件；</p></li><li><p><strong>步骤三</strong> 重启Helm仓库服务，如果是在容器中运行，使用如下指令重启该容器即可:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># $containerID: 容器ID</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">restart</span><span style="color:#E1E4E8;"> $containerID</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># $containerID: 容器ID</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> $containerID</span></span></code></pre></div></li></ul>`,22),e=[p];function t(c,r,h,y,i,E){return a(),l("div",null,e)}const u=s(o,[["render",t]]);export{m as __pageData,u as default};
